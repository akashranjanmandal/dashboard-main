'use client'
import { useState, useEffect } from 'react'
import NumberFlow from '@number-flow/react'
import {
  AreaChart,
  LineChart,
  XAxis,
  YAxis,
  Tooltip,
  Line,
  BarChart,
  Bar,
  PieChart,
  Pie,
  Cell,
  TooltipProps,
  Area,
  CartesianGrid,
  Sector,
  SectorProps,
  ResponsiveContainer
} from 'recharts'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card.jsx'
import {
  Home,
  Settings,
  Search,
  HelpCircle,
  Bell,
  MessageSquare,
  User,
  Sliders,
  Users,
  UserCheck,
  UserPlus,
  Percent
} from 'lucide-react'

import { Bar as ChartJSBar, Pie as ChartJSPie} from 'react-chartjs-2';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip as ChartJSTooltip,
  Legend,
  ArcElement
} from 'chart.js';

ChartJS.register(CategoryScale, LinearScale, BarElement, Title, ChartJSTooltip, Legend, ArcElement);



// Define the type for your API data
interface SignupData {
  month: string | null // allow null in case the API returns null values
  count: number
}
// Define a custom type that extends SectorProps to include the payload property
interface CustomSectorProps extends SectorProps {
  payload: { name: string; value: number }; // Adjust the type of payload as needed
}

export default function UserAnalyticsDashboard() {
  const [mounted, setMounted] = useState(false)
  
  // State for SQL-fetched user signup data (line chart)
  const [chartData, setChartData] = useState<SignupData[]>([])

  // State for the selected year (for filtering)
  const [selectedYear, setSelectedYear] = useState<string>('')

  useEffect(() => {
    setMounted(true)
  }, [])

  // Fetch data from the Flask API
  useEffect(() => {
    async function fetchData() {
      try {
        // Update the URL if needed; ensure your Flask server is running
        const res = await fetch('http://152.42.239.141:5000/api/user-signups')
        const data = (await res.json()) as SignupData[]
        setChartData(data)

        // Extract available years from data, filtering out invalid month values
        const availableYears: string[] = Array.from(
          new Set(
            data
              .filter((item) => item.month) // Only items with valid month
              .map((item) => (item.month ? item.month.split('-')[0] : ''))
              .filter((year) => year !== '')
          )
        )

        // Set default year if available
        if (availableYears.length > 0) {
          setSelectedYear(availableYears[0])
        }
      } catch (error) {
        console.error('Error fetching data:', error)
      }
    }
    fetchData()
  }, [])

  // Filter chartData by selected year; only consider items with a valid month value
  const filteredData = selectedYear
    ? chartData.filter(
        (item) => item.month && item.month.startsWith(selectedYear)
      )
    : chartData

  // Compute unique years for the dropdown from items with valid month
  const years: string[] = chartData.length
    ? Array.from(
        new Set(
          chartData
            .filter((item) => item.month)
            .map((item) => (item.month ? item.month.split('-')[0] : ''))
            .filter((year) => year !== '')
        )
      )
    : []


  // Add this state variable with your existing state declarations
  const [totalUsers, setTotalUsers] = useState<number>(0);
  // Add this useEffect block with your existing useEffect hooks
  useEffect(() => {
    async function fetchUserCount() {
      try {
        const res = await fetch('http://152.42.239.141:5000/api/user-count');
        const data = await res.json();
        if (data && data.length > 0) {
          setTotalUsers(data[0].count);
        }
      } catch (error) {
        console.error('Error fetching user count:', error);
      }
    }
    fetchUserCount();
  }, [])

  // Add this state variable with your existing state declarations
  const [activeUsers, setActiveUsers] = useState<number>(0);
  // Add this useEffect block with your existing useEffect hooks
  useEffect(() => {
    async function fetchActiveUserCount() {
      try {
        const res = await fetch('http://152.42.239.141:5000/api/active-user-count');
        const data = await res.json();
        // Add a check to ensure data exists and has a valid count
        if (data && data.length > 0 && data[0].active_users !== undefined) {
          setActiveUsers(data[0].active_users);
        } else {
          setActiveUsers(0);
        }
      } catch (error) {
        console.error('Error fetching user count:', error);
        setActiveUsers(0);
      }
    }
    fetchActiveUserCount();
  }, [])
  

  // Add this state variable with your existing state declarations
  const [approvalRate, setApprovalRate] = useState<number>(0);
  // Add this useEffect block with your existing useEffect hooks
  useEffect(() => {
    async function fetchActiveUserCount() {
      try {
        const res = await fetch('http://152.42.239.141:5000/api/approval-rate');
        const data = await res.json();
        // Add a check to ensure data exists and has a valid count
        if (data && data.length > 0 && data[0].Approval_Rate !== undefined) {
          setApprovalRate(data[0].Approval_Rate);
        } else {
          setApprovalRate(0);
        }
      } catch (error) {
        console.error('Error fetching user count:', error);
        setApprovalRate(0);
      }
    }
    fetchActiveUserCount();
  }, [])

  // Static data for other charts (unchanged)
  const [userData] = useState([
    { month: 'Jan', activeUsers: 4000, newUsers: 1200 },
    { month: 'Feb', activeUsers: 3000, newUsers: 900 },
    { month: 'Mar', activeUsers: 2000, newUsers: 800 },
    { month: 'Apr', activeUsers: 2780, newUsers: 1000 },
    { month: 'May', activeUsers: 1890, newUsers: 700 },
    { month: 'Jun', activeUsers: 2390, newUsers: 1100 },
    { month: 'Jul', activeUsers: 3490, newUsers: 1300 },
  ])
  
    // Prepare data for Chart.js
  const data = {
    labels: userData.map((item) => item.month),
    datasets: [
      {
        label: 'New Users',
        data: userData.map((item) => item.newUsers),
        backgroundColor: '#6549b9',
        // Adding border radius to each bar
        borderRadius: 15,
        borderSkipped: false,
      },
    ],
  };
  
  // Chart options including styling for tooltip and axes
  const options = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      ChartJSTooltip: {
        backgroundColor: '#1f2937',
        borderColor: '#374151',
        borderWidth: 1,
      },
      legend: {
        labels: {
          color: '#d1d5db',
        },
      },
    },
    scales: {
      x: {
        ticks: {
          color: '#d1d5db',
        },
        grid: {
          color: 'rgba(209, 213, 219, 0.1)',
        },
      },
      y: {
        ticks: {
          color: '#d1d5db',
        },
        grid: {
          color: 'rgba(209, 213, 219, 0.1)',
        },
      },
    },
  };

    const [userRetentionData] = useState([
      { name: 'Retained', value: 75 },
      { name: 'Churned', value: 25 },
    ])

    // Add this state variable with your existing state declarations
  const [couponRedeemCount, setCouponRedeemCount] = useState<Array<{ amount: string; coupon_count: number }>>([]);

  // Add this useEffect block with your existing useEffect hooks
  useEffect(() => {
    async function fetchCouponRedeemCount() {
      try {
        const res = await fetch('http://152.42.239.141:5000/api/coupons-used-count');
        const data = await res.json();
        
        // Updated check: no longer looks for data[0].state
      if (data && Array.isArray(data) && data.length > 0) {
        setCouponRedeemCount(data);
      } else {
        setCouponRedeemCount([]);
      }
      } catch (error) {
        console.error('Error fetching coupon Redeeming counts:', error);
        setCouponRedeemCount([]);
      }
    }
    fetchCouponRedeemCount();
  }, []);

    const pieChartData = {
      labels: couponRedeemCount.map((item) => item.amount),
      datasets: [
        {
          data: couponRedeemCount.map((item) => item.coupon_count),
          backgroundColor: ['#6549b9', '#FF8C42', '#1E88E5', '#43A047', '#FDD835', '#D81B60'], // Colors for each section
          borderWidth: 0, // Remove white borders
        },
      ],
    };
    
    const pieChartOptions = {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: {
          labels: {
            color: '#d1d5db', // Legend text color
          },
        },
        tooltip: {
          backgroundColor: '#1f2937',
          borderColor: '#374151',
          borderWidth: 1,
        },
      },
      cutout:'70%',
      animation: {
        animateScale: true, // Enables scaling animation
      },
    };
    

  const COLORS = ['#6549b9', '#FF8C42 '] // Greyish colors

  const [featureUsageData] = useState([
    { feature: 'Search', usage: 4000 },
    { feature: 'Profile', usage: 3000 },
    { feature: 'Settings', usage: 2000 },
    { feature: 'Notifications', usage: 2780 },
  ])
  // Add this state variable with your existing state declarations
  const [stateCounts, setStateCounts] = useState<Array<{ state: string; count_state: number }>>([]);

  // Add this useEffect block with your existing useEffect hooks
  useEffect(() => {
    async function fetchSchoolStateCounts() {
      try {
        const res = await fetch('http://152.42.239.141:5000/api/count-school-state');
        const data = await res.json();
        
        // Check if data exists and is an array with valid structure
        if (data && Array.isArray(data) && data.length > 0 && data[0].state !== undefined) {
          setStateCounts(data);
        } else {
          setStateCounts([]);
        }
      } catch (error) {
        console.error('Error fetching school state counts:', error);
        setStateCounts([]);
      }
    }
    fetchSchoolStateCounts();
  }, []);
  const schoolStateData = {
    labels: stateCounts.map((item) => item.state),
    datasets: [
      {
        label: 'No. of Schools',
        data: stateCounts.map((item) => item.count_state),
        backgroundColor: '#6549b9',
        // Adding border radius to each bar
        borderRadius: 15,
        borderSkipped: false,
      },
    ],
  };
  const schoolChartOptions = {
    indexAxis: "y" as const, // Makes it a horizontal bar chart
    responsive: true,
    plugins: {
      legend: { display: false },
      title: {
        display: true,
        font: { size: 16 },
      },
    },
    scales: {
      x: {
        ticks: {
          color: '#d1d5db',
        },
        grid: {
          color: 'rgba(209, 213, 219, 0.1)',
        },
      },
      y: {
        ticks: {
          color: '#d1d5db',
        },
        grid: {
          color: 'rgba(209, 213, 219, 0.1)',
        },
      },
    },
  };



  const [assignCounts, setAssignCounts] = useState<number[]>([]);

  useEffect(() => {
    async function fetchTeacherAssignCounts() {
      try {
        const res = await fetch("http://152.42.239.141:5000/api/teacher-assign-count");
        const data = await res.json();

        // Extract only assign counts from API response
        const counts = data.map((item: { assign_count: number }) => item.assign_count);
        setAssignCounts(counts);
      } catch (error) {
        console.error("Error fetching teacher assignment counts:", error);
      }
    }
    fetchTeacherAssignCounts();
  }, []);

  // Group assign counts into bins (e.g., 1-5, 6-10, etc.)
  const bins = [0, 5, 10, 15, 20, 25]; // Define bin ranges
  const binLabels = ["1-5", "6-10", "11-15", "16-20", "21-25", "26+"]; // Labels for bins
  const binData = Array(binLabels.length).fill(0); // Initialize bin counts

  assignCounts.forEach((count) => {
    if (count <= 5) binData[0]++;
    else if (count <= 10) binData[1]++;
    else if (count <= 15) binData[2]++;
    else if (count <= 20) binData[3]++;
    else if (count <= 25) binData[4]++;
    else binData[5]++;
  });

  const teacherAssignData = {
    labels: binLabels,
    datasets: [
      {
        label: "Number of Teachers",
        data: binData,
        backgroundColor: "#6549b9",
        borderRadius: 5,
      },
    ],
  };

  const teacherAssignOptions = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      ChartJSTooltip: {
        backgroundColor: '#1f2937',
        borderColor: '#374151',
        borderWidth: 1,
      },
      legend: {
        labels: {
          color: '#d1d5db',
        },
      },
    },
    scales: {
      x: {
        ticks: {
          color: '#d1d5db',
        },
        grid: {
          color: 'rgba(209, 213, 219, 0.1)',
        },
      },
      y: {
        ticks: {
          color: '#d1d5db',
        },
        grid: {
          color: 'rgba(209, 213, 219, 0.1)',
        },
      },
    },
  };
  const CustomTooltip: React.FC<TooltipProps<number, string>> = (props) => {
    const { active, payload, label } = props;  
    if (active && payload && payload.length) {
      return (
        <div className="p-2 bg-gray-800 text-white border border-gray-600 rounded-md shadow-md">
          <p className="text-sm text-gray-300">{`Month: ${label}`}</p>
          <p className="text-sm text-gray-100 font-semibold">{`Count: ${payload[0].value}`}</p>
        </div>
      )
    }
    return null
  }
  

  return (
    <div className="min-h-screen bg-gradient-to-br from-[#0a0a0f] to-[#1a1a24]">
      {/* Sidebar - added subtle border */}
      <div className="fixed left-0 top-0 h-screen w-20 bg-gray-900/50 backdrop-blur-md shadow-lg flex flex-col items-center py-8 border-r border-purple-500/20">
        <div className="w-12 h-12 bg-purple-600 rounded-xl mb-8 flex items-center justify-center border border-purple-400/30">
          <span className="text-white font-bold text-xl">A</span>
        </div>
        <Home className="mb-8 text-gray-400 hover:text-purple-500 transition-colors cursor-pointer" />
        <Settings className="mb-8 text-gray-400 hover:text-purple-500 transition-colors cursor-pointer" />
        <Search className="mb-8 text-gray-400 hover:text-purple-500 transition-colors cursor-pointer" />
        <HelpCircle className="text-gray-400 hover:text-purple-500 transition-colors cursor-pointer" />
      </div>

       {/* Main Content */}
       <div className="ml-20 p-8">
        {/* Top Bar */}
        <div className="flex justify-between items-center mb-12 bg-gray-900/30 p-4 rounded-xl backdrop-blur-sm">
          <div className="flex items-center space-x-6">
            <h2 className="text-purple-500 font-semibold">Analytics Dashboard</h2>
            <div className="flex space-x-4">
              <Bell className="text-gray-400 hover:text-purple-500 transition-colors cursor-pointer" />
              <MessageSquare className="text-gray-400 hover:text-purple-500 transition-colors cursor-pointer" />
              <Sliders className="text-gray-400 hover:text-purple-500 transition-colors cursor-pointer" />
            </div>
          </div>
          <div className="flex items-center space-x-4 bg-gray-800/50 px-4 py-2 rounded-lg">
            <User className="text-purple-500" />
            <span className="text-gray-300">Admin</span>
          </div>
        </div>

        {/* Welcome Section */}
        <div className="mb-12">
          <h1 className="text-4xl font-bold text-white mb-2">Welcome back, Admin!</h1>
          <p className="text-gray-400">Here's what's happening with your platform today.</p>
        </div>

        {/* Metrics Cards - added consistent borders */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-12">
          {[
            { title: 'Total Users', value: totalUsers, icon: Users, color: 'from-purple-600 to-blue-600' },
            { title: 'Active Users', value: activeUsers, icon: UserCheck, color: 'from-green-600 to-teal-600' },
            { title: 'New Signups', value: 1230, icon: UserPlus, color: 'from-orange-600 to-red-600' },
            { title: 'Approval Rate', value: approvalRate, icon: Percent, color: 'from-blue-600 to-cyan-600', suffix : '%' },
          ].map((metric, index) => {
            const Icon = metric.icon;
            return (
              <Card key={index} className="bg-gray-900/30 backdrop-blur-sm border border-purple-500/40 hover:border-[#5a31b0] transition-all duration-300">
                <CardContent className="p-6">
                  <div className="flex items-center justify-between mb-4">
                    <div className={`p-3 rounded-xl bg-gradient-to-br ${metric.color} border border-white/10`}>
                      <Icon className="w-6 h-6 text-white" />
                    </div>
                  </div>
                  <p className="text-gray-400 text-sm mb-1">{metric.title}</p>
                  <p className="text-3xl font-bold text-white">
                                              <NumberFlow
                                                value={metric.value}
                                                format={{ notation: 'standard'}}
                                                transformTiming={{ duration: 800, easing: 'ease-in-out' }}
                                                suffix={metric.suffix || ''}
                                        /></p>
                </CardContent>
              </Card>
            );
          })}
        </div>

        {/* Charts Section */}
        {mounted && (
          <>
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-12">
              {/* Area Chart */}
              <Card className="bg-gray-900/30 backdrop-blur-sm border border-purple-500/40 hover:border-[#5a31b0] transition-all duration-300">
                <CardHeader className="flex justify-between items-center p-6 border-b border-purple-500/10">
                  <CardTitle className="text-white font-semibold">User Signups Trend</CardTitle>
                  <select
                    className="bg-gray-800/50 text-gray-300 rounded-lg p-2 focus:ring-2 focus:ring-purple-500 outline-none border border-purple-500/20"
                    value={selectedYear}
                    onChange={(e) => setSelectedYear(e.target.value)}
                  >
                    {years.map((year) => (
                      <option key={year} value={year}>{year}</option>
                    ))}
                  </select>
                </CardHeader>
                <CardContent className="p-6">
                    <ResponsiveContainer width="100%" height={300}>
                        <AreaChart width={500} height={300} data={filteredData}>
                            <defs>
                            <linearGradient id="colorUv" x1="0" y1="0" x2="0" y2="1">
                                <stop offset="35%" stopColor="#8b5cf6" stopOpacity={0.8}/>
                                <stop offset="95%" stopColor="#8b5cf6" stopOpacity={0}/>
                            </linearGradient>
                            </defs>
                            <XAxis dataKey="month" stroke="#94a3b8" />
                            <YAxis stroke="#94a3b8" />
                            <CartesianGrid strokeDasharray="3 3" stroke="#334155" />
                            <Tooltip content={<CustomTooltip />} />
                            <Area type="monotone" dataKey="count" stroke="#8b5cf6" fill="url(#colorUv)" strokeWidth={2} />
                        </AreaChart>
                  </ResponsiveContainer>
                </CardContent>
              </Card>

              {/* Bar Chart */}
              <Card className="bg-gray-900/30 backdrop-blur-sm border border-purple-500/40 hover:border-[#5a31b0] transition-all duration-300">
                <CardHeader className="p-6 border-b border-purple-500/10">
                  <CardTitle className="text-white font-semibold">Distribution of Teacher Assignment Counts</CardTitle>
                </CardHeader>
                <CardContent className="p-6 flex justify-center">
                  <div style={{ width: '500px', height: '300px' }}>
                    <ChartJSBar data={teacherAssignData} options={teacherAssignOptions} />
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* Bottom Charts */}
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
                {/*Pie chart */}
                <Card className="bg-gray-900/30 backdrop-blur-sm border border-purple-500/40 hover:border-[#5a31b0] transition-all duration-300">
                    <CardHeader className="p-6 border-b border-purple-500/10">
                    <CardTitle className="text-white font-semibold">Coupons Redeemed count</CardTitle>
                    </CardHeader>
                    <CardContent className="flex justify-center items-center p-6">
                        <ResponsiveContainer height={300}>
                            <div className="w-[300px] h-[300px]">
                                <ChartJSPie data={pieChartData} options={pieChartOptions} />
                            </div>
                        </ResponsiveContainer>
                    
                    </CardContent>
              </Card>

              <Card className="lg:col-span-2 bg-gray-900/30 backdrop-blur-sm border border-purple-500/40 hover:border-[#5a31b0] transition-all duration-300">
                <CardHeader className="p-6 border-b border-purple-500/10">
                  <CardTitle className="text-white font-semibold">Top 5 school counts from different states</CardTitle>
                </CardHeader>
                <CardContent className="p-3 flex justify-center">
                    <ResponsiveContainer width="100%" height={300}>
                        {/* <BarChart width={700} height={300} data={featureUsageData}>
                            <XAxis dataKey="feature" stroke="#94a3b8" />
                            <YAxis stroke="#94a3b8" />
                            <Tooltip
                            contentStyle={{
                                backgroundColor: '#1f2937',
                                border: '1px solid #374151',
                            }}
                            />
                            <Bar dataKey="usage" fill="#8b5cf6" />
                        </BarChart> */}
                        <ChartJSBar data={schoolStateData} options={schoolChartOptions}/>
                    </ResponsiveContainer>
                </CardContent>
              </Card>
            </div>
          </>
        )}
      </div>
    </div>
  )
} 
